#!/bin/bash -e

# The following is used to:
# Publish images on pre-release and tag as edge
# Promote pre-releases to releases and tag as latest

. bin/build_utils

function print_help() {
  echo "Build Usage: $0 --internal"
  echo "Release Usage: $0 --edge"
  echo "Promote Usage: $0 --promote --source <VERSION> --target <VERSION>"
  echo " --internal: publish images to registry.tld"
  echo " --edge: publish docker images to docker hub"
  echo " --source <VERSION>: specify version number of local image"
  echo " --target <VERSION>: specify version number of remote image"
}

# Fail if no arguments are given.
if [[ $# -lt 1 ]]; then
  print_help
  exit 1
fi

PUBLISH_INTERNAL=false
PUBLISH_EDGE=false
PROMOTE=false

while [[ $# -gt 0 ]]; do
  case "$1" in
  --internal)
    PUBLISH_INTERNAL=true
    ;;
  --edge)
    PUBLISH_EDGE=true
    ;;
  --promote)
    PROMOTE=true
    ;;
  --source)
    SOURCE_ARG="$2"
    shift
    ;;
  --target)
    TARGET_ARG="$2"
    shift
    ;;
  --help)
    print_help
    exit 1
    ;;
  *)
    echo "Unknown option: ${1}"
    print_help
    exit 1
    ;;
  esac
  shift
done

REDHAT_REMOTE_IMAGE='scan.connect.redhat.com/ospid-1c46a2de-1d88-40e6-a433-7114ad0099cb/conjur-openshift-authenticator'
readonly REGISTRY="cyberark"
readonly REDHAT_LOCAL_IMAGE="conjur-authn-k8s-client-redhat"
readonly INTERNAL_REGISTRY="registry.tld"

# we changed the name to `conjur-authn-k8s-client`. Leaving `conjur-kubernetes-authenticator`
# for backwards-compatibility.
readonly DOCKER_IMAGES=(
  "conjur-kubernetes-authenticator"
  "conjur-authn-k8s-client"
)

  # Version derived from CHANGLEOG and automated release library
  VERSION=$(<VERSION)
  readonly VERSION

if [[ ${PUBLISH_INTERNAL} = true ]]; then
  echo "Publishing built images internally to registry.tld."
  SOURCE_TAG=dev
  REMOTE_TAG=$VERSION

  tag_and_push "conjur-authn-k8s-client:${SOURCE_TAG}" "${INTERNAL_REGISTRY}/conjur-authn-k8s-client:${REMOTE_TAG}"

  tag_and_push ${REDHAT_LOCAL_IMAGE}:${SOURCE_TAG} "${INTERNAL_REGISTRY}/${REDHAT_LOCAL_IMAGE}:${REMOTE_TAG}"

  echo "Pushing to RedHat container registry..."
  docker tag "${INTERNAL_REGISTRY}/${REDHAT_LOCAL_IMAGE}:${REMOTE_TAG}" "${REDHAT_REMOTE_IMAGE}:${REMOTE_TAG}"

  if docker login scan.connect.redhat.com -u unused -p "${REDHAT_API_KEY}"; then
    # you can't push the same tag twice to redhat registry, so ignore errors
    if ! docker push "${REDHAT_REMOTE_IMAGE}:${REMOTE_TAG}"; then
      echo 'RedHat push FAILED! (maybe the image was pushed already?)'
      exit 0
    fi
  else
    echo 'Failed to log in to scan.connect.redhat.com'
    exit 1
  fi
fi

if [[ ${PUBLISH_EDGE} = true ]]; then
  echo "Performing docker edge release."
  SOURCE_TAG=dev
  REMOTE_TAG=edge
  readonly TAGS=(
    "$REMOTE_TAG"
    "$VERSION"
  )

  push_conjur-k8s-cluster-test

  for image in "${DOCKER_IMAGES[@]}"; do
    echo "Tagging and pushing ${image} to docker hub."
    for REMOTE_TAG in "${TAGS[@]}"; do
      tag_and_push "conjur-authn-k8s-client:${SOURCE_TAG}" "${REGISTRY}/${image}:${REMOTE_TAG}"
      push_conjur-k8s-cluster-test
    done
  done
fi

if [[ ${PROMOTE} = true ]]; then
  if [[ -z ${SOURCE_ARG:-} || -z ${TARGET_ARG:-} ]]; then
  echo "When promoting, --source and --target flags are required."
    print_help
    exit 1
  fi

  # Update vars to utilize build_utils
  SOURCE_TAG=$SOURCE_ARG
  REMOTE_TAG=$TARGET_ARG

  # Promotes image based on flag values provided
  echo "Promoting image from ${SOURCE_TAG} to ${REMOTE_TAG}"
  readonly TAGS=(
    "$REMOTE_TAG"
    "latest"
  )

  for image in "${DOCKER_IMAGES[@]}"; do
    echo "Tagging and pushing ${image} to docker hub."
    for tag in "${TAGS[@]}" $(gen_versions "${REMOTE_TAG}"); do
      tag_and_push "${INTERNAL_REGISTRY}/conjur-authn-k8s-client:${SOURCE_TAG}" "${REGISTRY}/${image}:${tag}"
    done
  done

  echo "Pushing to RedHat container registry..."
  docker tag "${INTERNAL_REGISTRY}/${REDHAT_LOCAL_IMAGE}:${SOURCE_TAG}" "${REDHAT_REMOTE_IMAGE}:${REMOTE_TAG}"

  if docker login scan.connect.redhat.com -u unused -p "${REDHAT_API_KEY}"; then
    # you can't push the same tag twice to redhat registry, so ignore errors
    if ! docker push "${REDHAT_REMOTE_IMAGE}:${REMOTE_TAG}"; then
      echo 'RedHat push FAILED! (maybe the image was pushed already?)'
      exit 0
    fi
  else
    echo 'Failed to log in to scan.connect.redhat.com'
    exit 1
  fi

  for REMOTE_TAG in "${TAGS[@]}" $(gen_versions "${REMOTE_TAG}"); do
    push_conjur-k8s-cluster-test
  done
fi
