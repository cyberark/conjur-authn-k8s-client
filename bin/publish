#!/bin/bash -e

# The following is used to:
# Publish images on pre-release and tag as edge
# Promote pre-releases to releases and tag as latest

. bin/build_utils

function print_help() {
  echo "Build Usage: $0 --internal"
  echo "Release Usage: $0 --edge"
  echo "Promote Usage: $0 --promote --source <VERSION> --target <VERSION>"
  echo " --internal: publish images to registry.tld"
  echo " --manifest: publish manifest to registry.tld"
  echo " --edge: publish docker images to docker hub"
  echo " --internal-edge: publish edge manifest to registry.tld"
  echo " --source <VERSION>: specify version number of local image"
  echo " --target <VERSION>: specify version number of remote image"
  echo " --arch=ARCH: specify architecture for tagging an image (default 'amd64'). Possible values are: amd64,arm64"
}

function publish_manifest() {
  local source_tag="$1"
  local target_tag="$2"
  echo "Creating multi-arch manifest from ${source_tag} to ${target_tag} in ${INTERNAL_REGISTRY} (both platforms)."
  local images=(
    "${INTERNAL_REGISTRY}/${LOCAL_IMAGE}"
    "${INTERNAL_REGISTRY}/${REDHAT_LOCAL_IMAGE}"
  )

  # Always create manifests for SHA versioned images internally
  for image in "${images[@]}"; do
    prepare_manifest "$image" "$source_tag" "$target_tag"
  done
}

# Fail if no arguments are given.
if [[ $# -lt 1 ]]; then
  print_help
  exit 1
fi

PUBLISH_INTERNAL=false
PUBLISH_EDGE=false
PUBLISH_MANIFEST=false
PUBLISH_EDGE_MANIFEST=false
PROMOTE=false
ARCH="amd64"

while [[ $# -gt 0 ]]; do
  case "$1" in
  --internal)
    PUBLISH_INTERNAL=true
    ;;
  --manifest)
    PUBLISH_MANIFEST=true
    ;;
  --edge)
    PUBLISH_EDGE=true
    ;;
  --internal-edge)
    PUBLISH_EDGE_MANIFEST=true
    ;;
  --promote)
    PROMOTE=true
    ;;
  --source)
    SOURCE_ARG="$2"
    shift
    ;;
  --target)
    TARGET_ARG="$2"
    shift
    ;;
  --help)
    print_help
    exit 1
    ;;
  --arch)
    ARCH="$2"
    shift
    ;;
  *)
    echo "Unknown option: ${1}"
    print_help
    exit 1
    ;;
  esac
  shift
done

readonly REGISTRY="cyberark"
readonly LOCAL_IMAGE="conjur-authn-k8s-client"
readonly REDHAT_LOCAL_IMAGE="conjur-authn-k8s-client-redhat"
readonly INTERNAL_REGISTRY="registry.tld"
readonly REDHAT_REGISTRY="quay.io"
readonly REDHAT_CERT_PID="5e621f6502235d3f505f6093"

REDHAT_REMOTE_IMAGE="${REDHAT_REGISTRY}/redhat-isv-containers/${REDHAT_CERT_PID}"
REDHAT_USER="redhat-isv-containers+${REDHAT_CERT_PID}-robot"

# we changed the name to `conjur-authn-k8s-client`. Leaving `conjur-kubernetes-authenticator`
# for backwards-compatibility.
readonly DOCKER_IMAGES=(
  "conjur-kubernetes-authenticator"
  "conjur-authn-k8s-client"
)

  # Version derived from CHANGLEOG and automated release library
  VERSION=$(<VERSION)
  readonly VERSION

if [[ ${PUBLISH_INTERNAL} = true ]]; then
  echo "Publishing ${ARCH} built images internally to registry.tld."
  SOURCE_TAG=dev
  REMOTE_TAG="$VERSION-$ARCH"

  tag_and_push "${LOCAL_IMAGE}:${SOURCE_TAG}" "${INTERNAL_REGISTRY}/${LOCAL_IMAGE}:${REMOTE_TAG}"
  tag_and_push ${REDHAT_LOCAL_IMAGE}:${SOURCE_TAG} "${INTERNAL_REGISTRY}/${REDHAT_LOCAL_IMAGE}:${REMOTE_TAG}"
fi

if [[ ${PUBLISH_MANIFEST} = true ]]; then
  publish_manifest "${VERSION}" "${VERSION}"
fi

if [[ ${PUBLISH_EDGE_MANIFEST} = true ]]; then
  readonly REMOTE_TAG=edge
  publish_manifest "${VERSION}" "${REMOTE_TAG}"
fi

if [[ ${PUBLISH_EDGE} = true ]]; then
  echo "Performing docker edge release."
  SOURCE_TAG=dev
  REMOTE_TAG=edge
  readonly TAGS=(
    "$REMOTE_TAG"
    "$VERSION"
  )

  push_conjur-k8s-cluster-test

  for image in "${DOCKER_IMAGES[@]}"; do
    echo "Tagging and pushing ${image} to docker hub."
    for REMOTE_TAG in "${TAGS[@]}"; do
      tag_and_push "${LOCAL_IMAGE}:${SOURCE_TAG}" "${REGISTRY}/${image}:${REMOTE_TAG}"
      push_conjur-k8s-cluster-test
    done
  done
fi

if [[ ${PROMOTE} = true ]]; then
  if [[ -z ${SOURCE_ARG:-} || -z ${TARGET_ARG:-} ]]; then
  echo "When promoting, --source and --target flags are required."
    print_help
    exit 1
  fi

  # Update vars to utilize build_utils
  SOURCE_TAG=$SOURCE_ARG
  REMOTE_TAG=$TARGET_ARG

  # Promotes image based on flag values provided
  echo "Promoting image from ${SOURCE_TAG} to ${REMOTE_TAG}"
  readonly TAGS=(
    "$REMOTE_TAG"
    "latest"
  )

  for image in "${DOCKER_IMAGES[@]}"; do
    echo "Tagging and pushing ${image} to docker hub."
    for tag in "${TAGS[@]}" $(gen_versions "${REMOTE_TAG}"); do
      tag_and_push "${INTERNAL_REGISTRY}/${LOCAL_IMAGE}:${SOURCE_TAG}" "${REGISTRY}/${image}:${tag}"
    done
  done

  echo "Pushing to RedHat container registry ${REDHAT_REGISTRY} as user ${REDHAT_USER}"
  docker tag "${INTERNAL_REGISTRY}/${REDHAT_LOCAL_IMAGE}:${SOURCE_TAG}" "${REDHAT_REMOTE_IMAGE}:${REMOTE_TAG}"

  if docker login "${REDHAT_REGISTRY}" -u "${REDHAT_USER}" -p "${REDHAT_API_KEY}"; then
    # you can't push the same tag twice to redhat registry, so ignore errors
    if ! docker push "${REDHAT_REMOTE_IMAGE}:${REMOTE_TAG}"; then
      echo 'RedHat push FAILED! (maybe the image was pushed already?)'
      exit 0
    fi

    # scan image with preflight tool
    scan_redhat_image "${REDHAT_REMOTE_IMAGE}:${REMOTE_TAG}" "${REDHAT_CERT_PID}"

    # Push latest tag to RH
    docker tag "${INTERNAL_REGISTRY}/${REDHAT_LOCAL_IMAGE}:${SOURCE_TAG}" "${REDHAT_REMOTE_IMAGE}:latest"
    docker push "${REDHAT_REMOTE_IMAGE}:latest"
  else
    echo 'Failed to log in to quay.io'
    exit 1
  fi

  for REMOTE_TAG in "${TAGS[@]}" $(gen_versions "${REMOTE_TAG}"); do
    push_conjur-k8s-cluster-test
  done
fi
