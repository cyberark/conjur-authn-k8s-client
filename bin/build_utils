#!/bin/bash

set -euo pipefail

####
# Functions to generate version numbers for this project
####

readonly VERSION_GO_FILE="pkg/authenticator/version.go"

function short_version_tag() {
  grep -v '^//' "${VERSION_GO_FILE}" | grep 'var Version =' | awk -F'= ' '{print $2}' | tr -d '"'
}

# generate less specific versions, eg. given 1.2.3 will print 1.2 and 1
# (note: the argument itself is not printed, append it explicitly if needed)
function gen_versions() {
  local version=$1
  while [[ $version = *.* ]]; do
    version=${version%.*}
    echo $version
  done
}

# returns the git commit's hash only for non-fixed versions, empty otherwise.
# which can be identified by the TAG_NAME variable.
# The TAG_NAME variable is set automatically on tag-triggered builds for fixed versions.
function git_tag_suffix() {
  if [[ -z "${TAG_NAME:-}" ]]; then
    echo "-$(git_commit_short)"
  else
    echo ""
  fi
}

function git_commit_short() {
  git rev-parse --short HEAD
}

function push_conjur-k8s-cluster-test() {
    echo "Pushing Helm test image to Dockerhub..."
    source_image=conjur-k8s-cluster-test:dev
    destination_image_name=conjur-k8s-cluster-test
    echo "Tagging and pushing $REGISTRY/$destination_image_name:$tag"
    echo "docker tag $source_image '$REGISTRY/$destination_image_name:$tag'"
    echo "docker push '$REGISTRY/$destination_image_name:$tag'"
}

function retrieve_cyberark_ca_cert() {
  # On CyberArk dev laptops, golang module dependencies are downloaded with a
  # corporate proxy in the middle. For these connections to succeed we need to
  # configure the proxy CA certificate in build containers.
  #
  # To allow this script to also work on non-CyberArk laptops where the CA
  # certificate is not available, we update container certificates based on
  # a (potentially empty) certificate directory, rather than relying on the
  # CA file itself.
  mkdir -p "$(repo_root)/build_ca_certificate"

  # Only attempt to extract the certificate if the security
  # command is available.
  #
  # The certificate file must have the .crt extension to be imported
  # by `update-ca-certificates`.
  if command -v security &> /dev/null
  then
    security find-certificate \
      -a -c "CyberArk Enterprise Root CA" \
      -p > build_ca_certificate/cyberark_root.crt
  fi
}

repo_root() {
  git rev-parse --show-toplevel
}
