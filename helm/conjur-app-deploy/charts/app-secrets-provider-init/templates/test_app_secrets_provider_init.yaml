apiVersion: v1
kind: Service
metadata:
  name: test-app-secrets-provider-init
  labels:
    app: test-app-secrets-provider-init
spec:
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
  selector:
    app: test-app-secrets-provider-init
  type: {{ .Values.global.appServiceType }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-app-secrets-provider-init
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: test-app-secrets-provider-init
  name: test-app-secrets-provider-init
spec:
  replicas: 1
  selector:
    matchLabels:
      app: test-app-secrets-provider-init
  template:
    metadata:
      labels:
        app: test-app-secrets-provider-init
    spec:
      serviceAccountName: test-app-secrets-provider-init
      containers:
      - image: {{ printf "%s:%s" .Values.app.image.repository .Values.app.image.tag }}
        imagePullPolicy: {{ .Values.app.image.pullPolicy }}
        name: test-app
        ports:
        - name: http
          containerPort: 8080
        readinessProbe:
          httpGet:
            path: /pets
            port: http
          initialDelaySeconds: 15
          timeoutSeconds: 5
        env:
          - name: DB_URL
            valueFrom:
              secretKeyRef:
                name: test-app-secrets-provider-init-secret
                key: DB_URL
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                name: test-app-secrets-provider-init-secret
                key: DB_USERNAME
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: test-app-secrets-provider-init-secret
                key: DB_PASSWORD
        envFrom:
        - configMapRef:
            name: {{ .Values.global.conjur.conjurConnConfigMap }}
      initContainers:
      - image: {{ printf "%s:%s" .Values.secretsProvider.image.repository .Values.secretsProvider.image.tag }}
        imagePullPolicy: {{ .Values.secretsProvider.image.pullPolicy }}
        name: cyberark-secrets-provider-for-k8s
        env:
          - name: CONTAINER_MODE
            value: init
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: K8S_SECRETS
            value: test-app-secrets-provider-init-secret
          - name: SECRETS_DESTINATION
            value: k8s_secrets
          - name: DEBUG
            value: "true"
          - name: CONJUR_AUTHN_LOGIN
            valueFrom:
              configMapKeyRef:
                name: {{ .Values.conjur.authnConfigMap.name }}
                key: conjurAuthnLogin
        envFrom:
        - configMapRef:
            name: {{ .Values.global.conjur.conjurConnConfigMap }}
      imagePullSecrets:
        - name: dockerpullsecret
