apiVersion: v1
kind: Service
metadata:
  name: test-app-secrets-provider-p2f
  labels:
    app: test-app-secrets-provider-p2f
spec:
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
  selector:
    app: test-app-secrets-provider-p2f
  type: {{ .Values.global.appServiceType }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-app-secrets-provider-p2f-jwt
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: test-app-secrets-provider-p2f
  name: test-app-secrets-provider-p2f
spec:
  replicas: 1
  selector:
    matchLabels:
      app: test-app-secrets-provider-p2f
  template:
    metadata:
      labels:
        app: test-app-secrets-provider-p2f
      annotations:
        conjur.org/container-mode: "init"
        conjur.org/debug-logging: "true"
        conjur.org/secrets-destination: "file"
        conjur.org/jwt-token-path: /var/run/secrets/tokens/{{ .Values.secretsProvider.jwt.tokenFile }}
        conjur.org/conjur-secrets.p2f-app: |
          - test-secrets-provider-p2f-jwt-app-db/url
          - test-secrets-provider-p2f-jwt-app-db/username
          - test-secrets-provider-p2f-jwt-app-db/password
        conjur.org/secret-file-path.p2f-app: "./application.yaml"
        conjur.org/secret-file-format.p2f-app: template
        conjur.org/secret-file-template.p2f-app: |
          spring:
            datasource:
              platform: postgres
              url: jdbc:{{ printf `{{ secret "url" }}` }}
              username: {{ printf `{{ secret "username" }}` }}
              password: {{ printf `{{ secret "password" }}` }}
            jpa:
              generate-ddl: true
              hibernate:
                ddl-auto: update
    spec:
      serviceAccountName: test-app-secrets-provider-p2f-jwt
      containers:
      - image: {{ printf "%s:%s" .Values.app.image.repository .Values.app.image.tag }}
        imagePullPolicy: {{ .Values.app.image.pullPolicy }}
        name: test-app
        command: [ "java", "-jar", "/app.jar", {{ printf "--spring.config.location=file:%s/application.yaml" .Values.app.secretsMountPath }} ]
        ports:
        - name: http
          containerPort: 8080
        readinessProbe:
          httpGet:
            path: /pets
            port: http
          initialDelaySeconds: 15
          timeoutSeconds: 5
        volumeMounts:
        - name: secrets
          mountPath: {{ .Values.app.secretsMountPath }}
      initContainers:
      - image: {{ printf "%s:%s" .Values.secretsProvider.image.repository .Values.secretsProvider.image.tag }}
        imagePullPolicy: Always
        name: cyberark-secrets-provider-for-k8s
        env:
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: {{ .Values.global.conjur.conjurConnConfigMap }}
        volumeMounts:
        - name: conjur-access-token
          mountPath: /run/conjur
        - name: conjur-certs
          mountPath: /etc/conjur/ssl
        - name: podinfo
          mountPath: /conjur/podinfo
        - name: secrets
          mountPath: /conjur/secrets
        - name: jwt-token
          mountPath: /var/run/secrets/tokens
      {{- if eq .Values.app.platform "kubernetes" }}
      imagePullSecrets:
        - name: dockerpullsecret
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsUser: 65534
      {{- end }}
      volumes:
      - name: conjur-access-token
        emptyDir:
          medium: Memory
      - name: conjur-certs
        emptyDir:
          medium: Memory
      - name: jwt-token
        projected:
          sources:
            - serviceAccountToken:
                path: {{ .Values.secretsProvider.jwt.tokenFile }}
                expirationSeconds: 6000
                audience: conjur
      - name: podinfo
        downwardAPI:
          items:
          - path: annotations
            fieldRef:
              fieldPath: metadata.annotations
      - name: secrets
        emptyDir:
          medium: Memory
