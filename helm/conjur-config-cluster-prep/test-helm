#!/bin/bash
#
# Run a Kubernetes cluster prep Helm chart Helm test to validate
# an installed chart release.
#
# Example: Run test without authentication with a Conjur instance:
#     ./test-helm -r my-test-release
#
# Example: Run test including authentication with a Conjur instance:
#     ./test-helm -r my-test-release -a -v "validator"

source ../common/utils.sh

readonly UPGRADE_TIMEOUT="10s"
readonly TEST_TIMEOUT="10s"

print_usage() {
  echo "Usage:"
  echo "    This script will test the Helm release"
  echo ""
  echo "Syntax:"
  echo "    $0 [Options]"
  echo "    Options:"
  echo "    -a             Test authentication with Conjur instance"
  echo "    -h             Show help"
  echo "    -n <namespace> Specify the Namespace from which to test"
  echo "                   (defaults to 'conjur-oss')"
  echo "    -r <release>   Specify the Helm release"
  echo "                   (defaults to 'authn-k8s')"
  echo "    -v <host-ID>   Specify validator host ID to use for testing"
  echo "                   authentication (defaults to 'validator')"
}

test_authentication=false
namespace="conjur-oss"
helm_release="authn-k8s"
validator_id="validator"

function main() {
  # Process command line options
  local OPTIND
  while getopts ':ahn:r:v:' flag; do
    case "${flag}" in
      a) test_authentication=true ;;
      h) print_usage; exit 0 ;;
      n) namespace="${OPTARG}" ;;
      r) helm_release="${OPTARG}" ;;
      v) validator_id="${OPTARG}" ;;
      *) echo "Invalid argument -${OPTARG}" >&2; echo; print_usage ; exit 1;;
    esac
  done
  shift $((OPTIND-1))

  kubectl delete pod -l "app=cluster-prep-test" --ignore-not-found=true -n "$namespace"
  helm upgrade "$helm_release" . \
      --namespace "$namespace" \
      --reuse-values \
      --set test.authentication.enable="$test_authentication" \
      --set test.authentication.validatorID="$validator_id" \
      --set test.authentication.debug=true \
      --timeout "$UPGRADE_TIMEOUT" \
      --wait

  announce "Running Helm test"
  # Run with a timeout, since authenticator sidecar will run indefinitely.
  # Also, the Helm test '--logs' option does not work if there are
  # multiple containers in the test Pod, so logs have to be collected
  # individually.
  helm test "$helm_release" \
      --namespace "$namespace" \
      --timeout "$TEST_TIMEOUT"

  if "$test_authentication"; then
    announce "Retrieving Conjur authenticator container logs"
    kubectl logs "$helm_release"-cluster-prep-test authenticator -n "$namespace"
  fi

  announce "Retrieving BATS tester logs"
  kubectl logs "$helm_release"-cluster-prep-test tester -n "$namespace"

  # Since the Helm test always times out (since the authenticator sidecar
  # runs indefinitely whether its successful or not), we need to look at
  # the 'exitCode' of the test container to get the results of the test.
  kubectl get pod -l app=cluster-prep-test -o yaml -n "$namespace" | grep "exitCode: 0"
}

main "$@"
