---
# Source: conjur-config-cluster-prep/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: conjur-serviceaccount
  labels:
    release: cluster-prep
    heritage: Helm
    app.kubernetes.io/name: "conjur-serviceaccount"
    app.kubernetes.io/component: "conjur-kubernetes-identity"
    app.kubernetes.io/instance: "conjur-serviceaccount"
    app.kubernetes.io/part-of: "conjur-config"
    conjur.org/name: "conjur-serviceaccount"
    helm.sh/chart: conjur-config-cluster-prep-0.1.0
---
# Source: conjur-config-cluster-prep/templates/golden_configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: conjur-configmap
    labels:
      release: cluster-prep
      heritage: Helm
      app.kubernetes.io/name: "conjur-golden-configmap"
      app.kubernetes.io/component: "conjur-reference-config"
      app.kubernetes.io/instance: "conjur-golden-configmap"
      app.kubernetes.io/part-of: "conjur-config"
      conjur.org/name: "conjur-golden-configmap"
      helm.sh/chart: conjur-config-cluster-prep-0.1.0
data:
    # authn-k8s Configuration 
    authnK8sAuthenticatorID: <Insert Authenticator ID Here>
    authnK8sClusterRole: conjur-clusterrole
    authnK8sNamespace: app-test
    authnK8sServiceAccount: conjur-serviceaccount

    # Conjur Configuration 
    conjurAccount: <Insert Conjur Account Here>
    conjurApplianceUrl: https://insert.conjur.appliance.url.here
    conjurSslCertificateBase64: "Insert+Base64+encoded+Conjur+Certificate"
    conjurSslCertificate: "\"{\x1e\xae߁jǺ\xe3\xe7\xa7r\x87^wਞ;\xab\xf8'\xab\xb6'\xe2q\xab^"
---
# Source: conjur-config-cluster-prep/templates/tests/test-cluster-prep-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-prep-tests-configmap

data:
  helm-test.bats: |-    
    #!/usr/bin/env bats
    
    # Run out of same directory in which this script resides
    cd "/tests"
    source "./utils.sh"
    
    source "/bats/bats-support/load.bash"
    source "/bats/bats-assert/load.bash"
    source "/bats/bats-file/load.bash"
    
    readonly ACCESS_TOKEN_FILE="/run/conjur/access-token"
    readonly AUTHN_LOG_FILE="/run/conjur/authn-logs.txt"
    readonly TEMP_INFO_FILE="/info.txt"
    readonly AUTHN_TIMEOUT_SECS=5
    
    # Baseline BATS test result color
    text_color "$MAGENTA"
    
    
    ###################################################
    #               Helper Functions                  #
    ###################################################
    
    function conjur_is_reachable() {
      curl -s -k --connect-timeout 5 "$conjurApplianceUrl":443 >&2
    }
    
    function get_conjur_info() {
      curl -s -k --connect-timeout 5 "$conjurApplianceUrl"/info
    }
    
    function has_authorization_error() {
      echo $1 | grep -s -q "Authorization missing"
    }
    
    function conjur_access_token_exists() {
      test -f "$ACCESS_TOKEN_FILE"
    }
    
    ###################################################
    #  Validation Tests Not Requiring Authentication  #
    ###################################################
    
    @test "Conjur Appliance URL is a reachable address" {
      display_info "Attempting to reach Conjur URL with 'curl -k ...'"
      run conjur_is_reachable
      if [ "$status" -ne 0 ]; then
        display_error "The 'conjur.applianceUrl' chart value is set to\n" \
                      "$conjurApplianceUrl. This is not reachable via 'curl -k'"
      fi
      assert_success
    }
    
    # If the Conjur instance supports an /info endpoint, then validate that one
    # part of the Conjur config (e.g. Conjur account or authenticator ID) matches
    # the corresponding field in the /info response.
    #
    # Syntax:
    #   validate_info_endpoint_field <YAML path> <exp value> <desc> <chart value>
    #
    # Where arguments are:
    #   <YAML path>:   YAML path to field in /info response,
    #                  e.g. '.configuration.conjur.account'
    #   <exp value>:   Value expected in /info response
    #   <desc>:        Description of field
    #   <chart value>: Corresponding Helm chart value, e.g. 'conjur.account'
    #
    function validate_info_endpoint_field() {
      yaml_path=$1
      expected_value=$2
      description=$3
      chart_value=$4
    
      # First make sure that the Conjur URL is a reachable address
      display_info "Checking whether Conjur URL is a reachable address."
      run conjur_is_reachable
      if [ "$status" -ne 0 ]; then
        skip "test due to Conjur URL being unreachable."
      fi
    
      display_info "Conjur URL is reachable. Checking whether /info REST\n" \
                   "endpoint is available at that address."
      run get_conjur_info
      if [ "$status" -ne 0 ] || (has_authorization_error "$output"); then
        skip "test due to the /info REST endpoint being unavailable for Conjur OSS."
      fi
      conjur_info="$output"
    
      display_info "The /info endpoint is available. Validating $description\n" \
                   "($expected_value) based on /info content."
      run yq eval "$yaml_path" <(echo "$conjur_info")
      if [ "$output" != "$expected_value" ]; then
        display_error "The '$chart_value' chart value is set to $expected_value.\n" \
                      "This does not match the actual $description."
      fi
      assert_output "$expected_value"
    }
    
    @test "Conjur Account is valid" {
      yaml_path=".configuration.conjur.account"
      exp_value="$conjurAccount"
      description="Conjur account"
      chart_value="conjur.account"
      validate_info_endpoint_field "$yaml_path" "$exp_value" "$description" "$chart_value"
    }
    
    @test "Conjur Authenticator ID is valid" {
      yaml_path=".services.authn-k8s.name"
      exp_value="$authnK8sAuthenticatorID"
      description="Authenticator ID"
      chart_value="authnK8s.authenticatorID"
      validate_info_endpoint_field "$yaml_path" "$exp_value" "$description" "$chart_value"
    }
    
    
    ###################################################
    #    Validation Tests Requiring Authentication    #
    ###################################################

  utils.sh: |-    
    #!/bin/bash
    
    # Color codes for ANSI color escape squences
    RESET_COLOR=0
    RED=31
    GREEN=32
    NO_COLOR=33
    BLUE=34
    MAGENTA=35
    CYAN=36
    
    ANNOUNCE_COLOR="$BLUE"
    ERROR_COLOR="$RED"
    INFO_COLOR="$GREEN"
    CODEBLOCK_COLOR="$BLUE"
    
    function text_color() {
      #
      color_code="$1"
      echo -e '\033[0;'"$color_code"'m'
      #
    }
    
    function banner() {
      text_color "$1"
      shift
      echo =====================================================================
      echo -e "${@}"
      echo =====================================================================
      text_color "$RESET_COLOR"
    }
    
    function indented_banner() {
      text_color "$1"
      shift
      echo "      --------------------------------------------------------------"
      echo -e "      ${@}"
      echo "      --------------------------------------------------------------"
      text_color "$RESET_COLOR"
    }
    
    function announce() {
      banner "$BLUE" "$@"
    }
    
    function display_error() {
      banner "$RED" "$@"
    }
    
    function display_info() {
      text_color "$INFO_COLOR"
      echo -e "$@"
      text_color "$RESET_COLOR"
    }
    
    function codeblock() {
      indented_banner "$CODEBLOCK_COLOR" "$@"
    }
---
# Source: conjur-config-cluster-prep/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: conjur-clusterrole
  labels:
    release: cluster-prep
    heritage: Helm
    app.kubernetes.io/name: "conjur-clusterrole"
    app.kubernetes.io/component: "conjur-permissions"
    app.kubernetes.io/instance: "conjur-clusterrole"
    app.kubernetes.io/part-of: "conjur-config"
    conjur.org/name: "conjur-clusterrole"
    helm.sh/chart: conjur-config-cluster-prep-0.1.0

rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods", "serviceaccounts"]
  verbs: ["get", "list"]
- apiGroups: ["extensions"]
  resources: [ "deployments", "replicasets"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: [ "deployments", "statefulsets", "replicasets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create", "get"]
