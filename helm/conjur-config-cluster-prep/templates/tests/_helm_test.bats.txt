# Define a Helm named template so that this BATS script can be included
# in a Helm test ConfigMap.
#
{{- define "kube-cluster-prep.helm-test.bats" }}
#!/usr/bin/env bats

# Run out of same directory in which this script resides
cd "/tests"
source "./utils.sh"

source "/bats/bats-support/load.bash"
source "/bats/bats-assert/load.bash"
source "/bats/bats-file/load.bash"

readonly ACCESS_TOKEN_FILE="/run/conjur/access-token"
readonly AUTHN_LOG_FILE="/run/conjur/authn-logs.txt"
readonly TEMP_INFO_FILE="/info.txt"
readonly AUTHN_TIMEOUT_SECS=5

# Baseline BATS test result color
text_color "$MAGENTA"


###################################################
#               Helper Functions                  #
###################################################

function conjur_is_reachable() {
  curl -s -k --connect-timeout 5 "$conjurApplianceUrl":443 >&2
}

function get_conjur_info() {
  curl -s -k --connect-timeout 5 "$conjurApplianceUrl"/info
}

function has_authorization_error() {
  echo $1 | grep -s -q "Authorization missing"
}

function conjur_access_token_exists() {
  test -f "$ACCESS_TOKEN_FILE"
}

###################################################
#  Validation Tests Not Requiring Authentication  #
###################################################

@test "Conjur Appliance URL is a reachable address" {
  display_info "Attempting to reach Conjur URL with 'curl -k ...'"
  run conjur_is_reachable
  if [ "$status" -ne 0 ]; then
    display_error "The 'conjur.applianceUrl' chart value is set to\n" \
                  "$conjurApplianceUrl. This is not reachable via 'curl -k'"
  fi
  assert_success
}

# If the Conjur instance supports an /info endpoint, then validate that one
# part of the Conjur config (e.g. Conjur account or authenticator ID) matches
# the corresponding field in the /info response.
#
# Syntax:
#   validate_info_endpoint_field <YAML path> <exp value> <desc> <chart value>
#
# Where arguments are:
#   <YAML path>:   YAML path to field in /info response,
#                  e.g. '.configuration.conjur.account'
#   <exp value>:   Value expected in /info response
#   <desc>:        Description of field
#   <chart value>: Corresponding Helm chart value, e.g. 'conjur.account'
#
function validate_info_endpoint_field() {
  yaml_path=$1
  expected_value=$2
  description=$3
  chart_value=$4

  # First make sure that the Conjur URL is a reachable address
  display_info "Checking whether Conjur URL is a reachable address."
  run conjur_is_reachable
  if [ "$status" -ne 0 ]; then
    skip "test due to Conjur URL being unreachable."
  fi

  display_info "Conjur URL is reachable. Checking whether /info REST\n" \
               "endpoint is available at that address."
  run get_conjur_info
  if [ "$status" -ne 0 ] || (has_authorization_error "$output"); then
    skip "test due to the /info REST endpoint being unavailable for Conjur OSS."
  fi
  conjur_info="$output"

  display_info "The /info endpoint is available. Validating $description\n" \
               "($expected_value) based on /info content."
  run yq eval "$yaml_path" <(echo "$conjur_info")
  if [ "$output" != "$expected_value" ]; then
    display_error "The '$chart_value' chart value is set to $expected_value.\n" \
                  "This does not match the actual $description."
  fi
  assert_output "$expected_value"
}

@test "Conjur Account is valid" {
  yaml_path=".configuration.conjur.account"
  exp_value="$conjurAccount"
  description="Conjur account"
  chart_value="conjur.account"
  validate_info_endpoint_field "$yaml_path" "$exp_value" "$description" "$chart_value"
}

@test "Conjur Authenticator ID is valid" {
  yaml_path=".authenticators.enabled"
  exp_value="$authnK8sAuthenticatorID"
  description="Authenticator ID"
  chart_value="authnK8s.authenticatorID"
  validate_info_endpoint_field "$yaml_path" "$exp_value" "$description" "$chart_value"
}


###################################################
#    Validation Tests Requiring Authentication    #
###################################################

{{- if .Values.test.authentication.enable }}

@test "Conjur authenticator sidecar has successfully retrieved an API token" {
  display_info "Checking for existence of access token at '$ACCESS_TOKEN_FILE'"
  secs=0
  until [ "$secs" -ge "$AUTHN_TIMEOUT_SECS" ]
  do
    run conjur_access_token_exists
    if [ "$status" -eq 0 ]; then
      break
    fi
    secs=$((secs+1))
    sleep 1
  done
  if [ "$status" -ne 0 ]; then
    display_error "The authenticator sidecar was not able to authenticate\n" \
                  "with Conjur. Check that your Conjur policy contains the\n" \
                  "required validator host ID with the command:\n" \
                  "  conjur list -k host -s conjur/authn-k8s/{{ .Values.authnK8s.authenticatorID }}/{{ .Values.test.authentication.validatorID }}\n"
  fi
  assert_success
}

function skip_if_authn_successful() {
  # No need to check for logged errors if authentication was successful
  if conjur_access_token_exists; then
    skip "error checking since authentication with Conjur was successful."
  fi
}

@test "CAKC028 error code does not appear in authenticator logs" {
  skip_if_authn_successful
  error_code="CAKC028"
  display_info "Checking for existence of error code $error_code in authenticator logs"
  run grep "$error_code" "$AUTHN_LOG_FILE"
  if [ "$status" -eq 0 ]; then
    display_error "The authenticator returns the following error:\n" \
      "$output\n" \
      "This means that Subject names in the Conjur's SSL certificate\n" \
      "does not include the domain name in the configured Conjur Appliance\n" \
      "URL: $conjurApplianceUrl\n" \
      "Please check that the configured Conjur Appliance URL is correct."
  fi
  # Failure of the grep command is success in this case
  assert_failure
}

@test "CAKC007 error code does not appear in authenticator logs" {
  skip_if_authn_successful
  error_code="CAKC007"
  display_info "Checking for existence of error code $error_code in authenticator logs"
  run grep "$error_code" "$AUTHN_LOG_FILE"
  if [ "$status" -eq 0 ]; then
    display_error "The authenticator returns the following error:\n" \
      "$output\n" \
      "This means that neither of the following Helm chart values is set:\n" \
      "    conjur.certificateFilePath\n" \
      "    conjur.certificateBase64\n" \
      "At least one of these must be set."
  fi
  # Failure of the grep command is success in this case
  assert_failure
}

{{- end }}

{{- end }}
